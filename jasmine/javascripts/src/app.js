// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.App = {
    Routers: {},
    Collections: {},
    Models: {},
    Views: {}
  };

  App.Models.Note = (function(_super) {

    __extends(Note, _super);

    function Note() {
      return Note.__super__.constructor.apply(this, arguments);
    }

    Note.prototype.defaults = {
      author: "",
      text: ""
    };

    Note.prototype.validate = function(attrs, options) {
      if (attrs.author.length === 0) {
        return {
          author: 'Author is required.'
        };
      }
      if (attrs.text.length === 0) {
        return {
          text: 'Text is required.'
        };
      }
    };

    return Note;

  })(Backbone.Model);

  App.Collections.Notes = (function(_super) {

    __extends(Notes, _super);

    function Notes() {
      return Notes.__super__.constructor.apply(this, arguments);
    }

    Notes.prototype.model = App.Models.Note;

    Notes.prototype.nextId = function() {
      var max;
      max = this.max(function(model) {
        return model.id;
      }).id;
      if (max) {
        return max + 1;
      }
      return 1;
    };

    return Notes;

  })(Backbone.Collection);

  App.Views.NoteEdit = (function(_super) {

    __extends(NoteEdit, _super);

    function NoteEdit() {
      return NoteEdit.__super__.constructor.apply(this, arguments);
    }

    NoteEdit.prototype.events = {
      "click button.save": "save"
    };

    NoteEdit.prototype.initialize = function(options) {
      return this.note = options.note;
    };

    NoteEdit.prototype.save = function(event) {
      event.stopPropagation();
      event.preventDefault();
      this.note.set({
        author: this.$el.find('input[name=author]').val(),
        text: this.$el.find('textarea[name=text]').val()
      });
      return window.location.hash = "notes/index";
    };

    NoteEdit.prototype.render = function() {
      this.$el.html(_.template($('#formTemplate').html(), this.note.toJSON()));
      this.$el.find('h2').text('Edit Note');
      return this;
    };

    return NoteEdit;

  })(Backbone.View);

  App.Views.NoteRow = (function(_super) {

    __extends(NoteRow, _super);

    function NoteRow() {
      return NoteRow.__super__.constructor.apply(this, arguments);
    }

    NoteRow.prototype.tagName = "tr";

    NoteRow.prototype.events = {
      "click a.delete": "destroy"
    };

    NoteRow.prototype.initialize = function(options) {
      this.note = options.note;
      return this.notes = options.notes;
    };

    NoteRow.prototype.render = function() {
      this.$el.html(_.template($('#rowTemplate').html(), this.note.toJSON()));
      return this;
    };

    NoteRow.prototype.destroy = function(event) {
      event.preventDefault();
      event.stopPropagation();
      this.notes.remove(this.note);
      return this.$el.remove();
    };

    return NoteRow;

  })(Backbone.View);

  App.Views.NoteNew = (function(_super) {

    __extends(NoteNew, _super);

    function NoteNew() {
      return NoteNew.__super__.constructor.apply(this, arguments);
    }

    NoteNew.prototype.events = {
      "click button.save": "save"
    };

    NoteNew.prototype.initialize = function(options) {
      this.note = options.note;
      return this.notes = options.notes;
    };

    NoteNew.prototype.save = function(event) {
      var errors;
      event.stopPropagation();
      event.preventDefault();
      this.note.set({
        author: this.$el.find('input[name=author]').val(),
        text: this.$el.find('textarea[name=text]').val(),
        id: this.notes.nextId()
      });
      errors = this.note.validate(this.note.attributes);
      if (errors) {
        return this.handleErrors(errors);
      } else {
        this.notes.add(this.note);
        return window.location.hash = "notes/index";
      }
    };

    NoteNew.prototype.handleErrors = function(errors) {
      var field, _i, _len, _ref, _results;
      _ref = _.keys(errors);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        field = _ref[_i];
        _results.push(this.$el.find("[name=" + field + "]").closest('.control-group').addClass('error'));
      }
      return _results;
    };

    NoteNew.prototype.render = function() {
      this.$el.html(_.template($('#formTemplate').html(), this.note.toJSON()));
      this.$el.find('h2').text('Create New Note');
      return this;
    };

    return NoteNew;

  })(Backbone.View);

  App.Views.NoteIndex = (function(_super) {

    __extends(NoteIndex, _super);

    function NoteIndex() {
      return NoteIndex.__super__.constructor.apply(this, arguments);
    }

    NoteIndex.prototype.initialize = function(options) {
      this.notes = options.notes;
      return this.notes.bind('reset', this.addAll, this);
    };

    NoteIndex.prototype.render = function() {
      this.$el.html($('#indexTemplate').html());
      this.addAll();
      return this;
    };

    NoteIndex.prototype.addAll = function() {
      this.$el.find('tbody').children().remove();
      return _.each(this.notes.models, $.proxy(this, 'addOne'));
    };

    NoteIndex.prototype.addOne = function(note) {
      var view;
      view = new App.Views.NoteRow({
        notes: this.notes,
        note: note
      });
      return this.$el.find("tbody").append(view.render().el);
    };

    return NoteIndex;

  })(Backbone.View);

  App.Routers.Notes = (function(_super) {

    __extends(Notes, _super);

    function Notes() {
      return Notes.__super__.constructor.apply(this, arguments);
    }

    Notes.prototype.routes = {
      "": "index",
      "notes/index": "index",
      "notes/new": "create",
      "notes/:id/edit": "edit"
    };

    Notes.prototype.initialize = function(options) {
      if (options) {
        return this.notes = options.notes;
      }
    };

    Notes.prototype.index = function() {
      this.currentView = new App.Views.NoteIndex({
        notes: this.notes
      });
      return $('#primary-content').html(this.currentView.render().el);
    };

    Notes.prototype.create = function() {
      this.currentView = new App.Views.NoteNew({
        notes: this.notes,
        note: new App.Models.Note()
      });
      return $('#primary-content').html(this.currentView.render().el);
    };

    Notes.prototype.edit = function(id) {
      var note;
      note = this.notes.get(id);
      this.currentView = new App.Views.NoteEdit({
        note: note
      });
      return $('#primary-content').html(this.currentView.render().el);
    };

    return Notes;

  })(Backbone.Router);

}).call(this);
