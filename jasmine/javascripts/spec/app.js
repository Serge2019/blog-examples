// Generated by CoffeeScript 1.3.3
(function() {
  var currentWindowOnload, execJasmine, htmlReporter, jasmineEnv;

  describe("App", function() {
    return it("is defined", function() {
      return expect(App).toBeDefined();
    });
  });

  describe("App.Models.Note", function() {
    it("is defined", function() {
      return expect(App.Models.Note).toBeDefined();
    });
    it("sets default values", function() {
      var note;
      note = new App.Models.Note;
      expect(note.get("author")).toEqual("");
      return expect(note.get("text")).toEqual("");
    });
    return describe("Validation", function() {
      beforeEach(function() {
        return this.attrs = {
          author: "John",
          text: "Sometext"
        };
      });
      afterEach(function() {
        var note;
        note = new App.Models.Note(this.attrs);
        return expect(note.isValid()).toBeFalsy();
      });
      it("validates the presence of author", function() {
        return this.attrs["author"] = "";
      });
      return it("validates the presence of text", function() {
        return this.attrs["text"] = "";
      });
    });
  });

  describe("App.Collections.Notes", function() {
    it("is defined", function() {
      return expect(App.Collections.Notes).toBeDefined();
    });
    it("use Note model", function() {
      var notes;
      notes = new App.Collections.Notes;
      return expect(notes.model).toEqual(App.Models.Note);
    });
    return describe("nextId", function() {
      it("returns 1 if collection is empty", function() {
        var notes;
        notes = new App.Collections.Notes;
        return expect(notes.nextId()).toEqual(1);
      });
      return it("returns max(id) + 1 if collection is not empty", function() {
        var notes;
        notes = new App.Collections.Notes([
          {
            id: 3
          }, {
            id: 7
          }
        ]);
        return expect(notes.nextId()).toEqual(8);
      });
    });
  });

  describe("App.Routers.Notes", function() {
    it("is defined", function() {
      return expect(App.Routers.Notes).toBeDefined();
    });
    describe("routes firing", function() {
      beforeEach(function() {
        this.notes = new App.Collections.Notes([
          {
            id: 1,
            author: "John",
            text: "Lorem ipsum"
          }
        ]);
        this.router = new App.Routers.Notes({
          notes: this.notes
        });
        this.spy = jasmine.createSpy('ROUTER');
        try {
          Backbone.history.start({
            silent: true
          });
        } catch (e) {
          false;
        }
        return this.router.navigate("away");
      });
      afterEach(function() {
        return $('#primary-content').empty();
      });
      it("fires the index route with a blank hash", function() {
        this.router.bind("route:index", this.spy);
        this.router.navigate("", true);
        expect(this.spy).toHaveBeenCalled();
        return expect(this.spy).toHaveBeenCalledWith();
      });
      it("fires the index route with notes/index hash", function() {
        this.router.bind("route:index", this.spy);
        this.router.navigate("notes/index", true);
        expect(this.spy).toHaveBeenCalled();
        return expect(this.spy).toHaveBeenCalledWith();
      });
      it("fires the create route with notes/new hash", function() {
        this.router.bind("route:create", this.spy);
        this.router.navigate("notes/new", true);
        expect(this.spy).toHaveBeenCalled();
        return expect(this.spy).toHaveBeenCalledWith();
      });
      return it("fires the edit route with notes/:id/edit hash", function() {
        this.router.bind("route:edit", this.spy);
        this.router.navigate("notes/1/edit", true);
        expect(this.spy).toHaveBeenCalled();
        return expect(this.spy).toHaveBeenCalledWith('1');
      });
    });
    return describe("routes methods", function() {
      beforeEach(function() {
        this.notes = new App.Collections.Notes([
          {
            id: 1,
            author: "John",
            text: "Lorem ipsum"
          }
        ]);
        return this.router = new App.Routers.Notes({
          notes: this.notes
        });
      });
      afterEach(function() {
        return $('#primary-content').empty();
      });
      it("creates index view", function() {
        this.router.index();
        expect(this.router.currentView).toEqual(jasmine.any(App.Views.NoteIndex));
        return expect($('#primary-content').text()).toContain('Notes List');
      });
      it("creates new view", function() {
        this.router.create();
        expect(this.router.currentView).toEqual(jasmine.any(App.Views.NoteNew));
        return expect($('#primary-content').text()).toContain('Create New Note');
      });
      return it("creates edit view", function() {
        this.router.edit('1');
        expect(this.router.currentView).toEqual(jasmine.any(App.Views.NoteEdit));
        return expect($('#primary-content').text()).toContain('Edit Note');
      });
    });
  });

  describe("App.Views.NoteIndex", function() {
    it("is defined", function() {
      return expect(App.Views.NoteIndex).toBeDefined();
    });
    return describe("rendering", function() {
      beforeEach(function() {
        this.notes = new App.Collections.Notes([
          {
            id: 1,
            author: "John",
            text: "Lorem ipsum"
          }
        ]);
        return this.view = new App.Views.NoteIndex({
          notes: this.notes
        });
      });
      return it("renders notes", function() {
        var $el;
        $el = this.view.render().$el;
        expect($el.find('h2').text()).toContain('Notes List');
        return expect($el.text()).toContain("John");
      });
    });
  });

  describe("App.Views.NoteRow", function() {
    it("is defined", function() {
      return expect(App.Views.NoteRow).toBeDefined();
    });
    return describe("methods", function() {
      beforeEach(function() {
        this.note = new App.Models.Note({
          id: 1,
          author: "John",
          text: "Lorem ipsum"
        });
        this.notes = new App.Collections.Notes([this.note]);
        this.view = new App.Views.NoteRow({
          notes: this.notes,
          note: this.note
        });
        return this.$el = this.view.render().$el;
      });
      it("renders note", function() {
        return expect(this.$el.find("td:first-child").text()).toContain("John");
      });
      return it("destroy note", function() {
        spyOn(this.notes, 'remove').andCallThrough();
        spyOn(this.$el, 'remove');
        this.$el.find("a.delete").trigger('click');
        expect(this.notes.remove).toHaveBeenCalled();
        return expect(this.$el.remove).toHaveBeenCalled();
      });
    });
  });

  describe("App.Views.NoteEdit", function() {
    it("is defined", function() {
      return expect(App.Views.NoteEdit).toBeDefined();
    });
    return describe("methods", function() {
      beforeEach(function() {
        this.note = new App.Models.Note({
          id: 1,
          author: "John",
          text: "Lorem ipsum"
        });
        this.view = new App.Views.NoteEdit({
          note: this.note
        });
        this.$el = this.view.render().$el;
        return window.location.hash = "away";
      });
      it("renders note", function() {
        expect(this.$el.find("h2").text()).toContain("Edit Note");
        return expect(this.$el.find("input[name=author]").val()).toEqual(this.note.get("author"));
      });
      return it("saves note", function() {
        this.$el.find("input[name=author]").val("Dan");
        this.$el.find("button.save").trigger("click");
        expect(this.note.get("author")).toEqual("Dan");
        return expect(window.location.hash).toEqual("#notes/index");
      });
    });
  });

  describe("App.Views.NoteNew", function() {
    it("is defined", function() {
      return expect(App.Views.NoteNew).toBeDefined();
    });
    return describe("methods", function() {
      beforeEach(function() {
        this.note = new App.Models.Note();
        this.notes = new App.Collections.Notes([this.note]);
        this.view = new App.Views.NoteNew({
          notes: this.notes,
          note: this.note
        });
        this.$el = this.view.render().$el;
        return window.location.hash = "away";
      });
      it("renders form", function() {
        return expect(this.$el.find("h2").text()).toContain("Create New Note");
      });
      it("saves note", function() {
        this.$el.find("input[name=author]").val("Dan");
        this.$el.find("textarea[name=text]").val("Test text");
        this.$el.find("button.save").trigger("click");
        expect(this.notes.models[0].get("author")).toEqual("Dan");
        return expect(window.location.hash).toEqual("#notes/index");
      });
      return it("fails to save note", function() {
        this.$el.find("button.save").trigger("click");
        expect(this.notes.models[0].get("author")).toEqual("");
        expect(this.$el.find("input[name=author]").closest('.control-group').hasClass('error')).toBeTruthy();
        return expect(window.location.hash).not.toEqual("#notes/index");
      });
    });
  });

  jasmineEnv = jasmine.getEnv();

  jasmineEnv.updateInterval = 250;

  currentWindowOnload = window.onload;

  window.onload = function() {
    if (currentWindowOnload) {
      currentWindowOnload();
    }
    return execJasmine();
  };

  execJasmine = function() {
    return jasmineEnv.execute();
  };

  htmlReporter = new jasmine.HtmlReporter();

  jasmineEnv.addReporter(htmlReporter);

  jasmineEnv.specFilter = function(spec) {
    return htmlReporter.specFilter(spec);
  };

}).call(this);
