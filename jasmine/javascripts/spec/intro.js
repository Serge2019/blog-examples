// Generated by CoffeeScript 1.3.3
(function() {

  describe("Test Suite", function() {
    return it("has expectations", function() {
      return expect(1 + 2).toBe(3);
    });
  });

  describe("Disabled", function() {
    xdescribe("disabled suite", function() {
      return it("will not run", function() {
        return expect(true).toBe(true);
      });
    });
    return xit("is disabled", function() {
      return expect(true).toBe(true);
    });
  });

  describe("Matchers", function() {
    it("compares using ===", function() {
      return expect(1 + 2).toBe(3);
    });
    it("compares variables and objects", function() {
      var a, b;
      a = {
        x: 8,
        y: 9
      };
      b = {
        x: 8,
        y: 9
      };
      expect(a).toEqual(b);
      return expect(a).not.toBe(b);
    });
    it("checks value to be defined", function() {
      return expect(window.document).toBeDefined();
    });
    it("checks value to be undefined", function() {
      return expect(window.notExists).toBeUndefined();
    });
    it("checks value to be null", function() {
      var a;
      a = null;
      return expect(a).toBeNull();
    });
    it("checks value to be true", function() {
      return expect(5 > 0).toBeTruthy();
    });
    it("checks value to be false", function() {
      return expect(5 < 0).toBeFalsy();
    });
    it("checks value to be less than", function() {
      return expect(1 + 2).toBeLessThan(5);
    });
    it("checks value to be greater than", function() {
      return expect(1 + 2).toBeGreaterThan(0);
    });
    it("checks value to be close to", function() {
      return expect(1.2345).toBeCloseTo(1.2, 1);
    });
    it("checks RegEx match", function() {
      return expect("some string").toMatch(/string/);
    });
    it("checks inclusion", function() {
      expect([1, 2, 3]).toContain(2);
      return expect("some string").toContain("some");
    });
    return it("throws error", function() {
      var func;
      func = function() {
        return window.notExists.value;
      };
      return expect(func).toThrow();
    });
  });

  describe("Setup/Teardown", function() {
    var a;
    a = 0;
    beforeEach(function() {
      return a += 1;
    });
    afterEach(function() {
      return a = 0;
    });
    return it("uses val", function() {
      return expect(a).toEqual(1);
    });
  });

  describe("Asynchronous", function() {
    var a, async;
    a = 0;
    async = function() {
      return setTimeout((function() {
        return a = 5;
      }), 1000);
    };
    return it("async executes code", function() {
      runs(function() {
        return async();
      });
      return waitsFor((function() {
        return a === 5;
      }), 3000);
    });
  });

}).call(this);
